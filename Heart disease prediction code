import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import xgboost as xgb
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import seaborn as sns
import eli5
from eli5.sklearn import PermutationImportance
from sklearn import metrics
import matplotlib.pyplot as plt
df=pd.read_csv('/kaggle/input/heart-disease-prediction-dataset/Heart disease prediction dataset.csv')
df.isnull().sum()
df.info()
df.shape
df.head()
data.describe()
df.sample(5)
df.dtypes
df.target.value_counts()
disease = len(df[df['target'] == 1])
no_disease = len(df[df['target']== 0])
df.isnull().sum().sum()
qualitative = []
quantitative = []
for feature in df.columns:
    if len(df[feature].unique()) <= 8:
        qualitative.append(feature)
    else:
        quantitative.append(feature)
qualitative
ax = sns.distplot(df['thalach'])
df["thal"].value_counts()
#Number of people suffering from heart disease
s=0
for i in df['target']:
    if (i==1):
        s=s+1
    else:
        continue
print(s)
plt.figure(figsize=(10,5))
sns.countplot(x=df['target'],color='blue')
X = df.drop('target',1)
y = df['target']
print('shape of X and y respectively :', X.shape, y.shape)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
print('shape of X and y respectively (train) :', X_train.shape, y_train.shape)
print(df.corr()["target"].abs().sort_values(ascending=False))('shape of X and y respectively (test) :', X_test.shape, y_test.shape)
y = df["target"]
sns.countplot(y)
target_temp = df.target.value_counts()
print(target_temp)
print("Percentage of patience without heart problems: "+str(round(target_temp[0]*100/303,2)))
print("Percentage of patience with heart problems: "+str(round(target_temp[1]*100/303,2)))
pd.crosstab(df.age,df.target).plot(kind="bar",figsize=(20,6))
plt.title('Heart Disease Frequency for Ages')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.savefig('heartDiseaseAndAges.png')
plt.show()     
df.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',
       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'target']
#Heart disease according to Fasting Blood sugar
pd.crosstab(df.fasting_blood_sugar,df.target).plot(kind="bar",figsize=(20,10),color=['#4286f4','#f49242'])
plt.title("Heart disease according to FBS")
plt.xlabel('FBS- (Fasting Blood Sugar > 120 mg/dl) (1 = true; 0 = false)')
plt.xticks(rotation=90)
plt.legend(["Don't Have Disease", "Have Disease"])
plt.ylabel('Disease or not')
plt.show()    
#CHEST PAIN
df["chest_pain_type"].unique()
plt.figure(figsize=(26, 10))
sns.barplot(df["chest_pain_type"],y)
df["resting_blood_pressure"].unique()
plt.figure(figsize=(26, 10))
sns.barplot(df["resting_blood_pressure"],y)
df["rest_ecg"].unique()
data["exercise_induced_angina"].unique()
plt.figure(figsize=(10, 10))
sns.barplot(df["exercise_induced_angina"],y)
cor=df.corr()
top_corr_feature=cor.index
plt.figure(figsize=(20,20))
sns.heatmap(df[top_corr_feature].corr(),annot=True,cmap="RdYlGn")
plt.title("HEATMAP")
plt.show()






